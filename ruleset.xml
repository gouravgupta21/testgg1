<?xml version="1.0" encoding="UTF-8"?>
<ruleset name="Default ruleset used by the CodeClimate Engine for Salesforce.com Apex"
    xmlns="http://pmd.sourceforge.net/ruleset/2.0.0 [pmd.sourceforge.net]"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance [w3.org]"

         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 [pmd.sourceforge.net] https://pmd.sourceforge.io/ruleset_2_0_0.xsd [pmd.sourceforge.io]">
    <description>Custom Rule Set</description>
    <rule ref="category/apex/bestpractices.xml/UnusedLocalVariable" />
    <rule ref="category/apex/design.xml/CyclomaticComplexity" />
    <rule ref="category/apex/performance.xml/AvoidDebugStatements" />
    <rule ref="category/apex/errorprone.xml/AvoidHardcodingId" />
    <rule ref="category/apex/codestyle.xml/MethodNamingConventions" />
    <rule ref="category/apex/security.xml/ApexBadCrypto" />
    <rule ref="category/apex/codestyle.xml/ClassNamingConventions" />
    <rule ref="category/apex/security.xml/ApexSuggestUsingNamedCred" />
    <rule ref="category/apex/errorprone.xml/MethodWithSameNameAsEnclosingClass" />
    <rule ref="category/apex/security.xml/ApexSOQLInjection" />
    <rule ref="category/apex/design.xml/ExcessiveClassLength" />
    <rule ref="category/apex/bestpractices.xml/ApexUnitTestMethodShouldHaveIsTestAnnotation" />
    <rule ref="category/apex/bestpractices.xml/ApexUnitTestClassShouldHaveAsserts" />
    <rule ref="category/apex/bestpractices.xml/ApexUnitTestShouldNotUseSeeAllDataTrue" />
    <rule ref="category/apex/bestpractices.xml/AvoidLogicInTrigger" />
    <rule ref="category/apex/codestyle.xml/IfStmtsMustUseBraces" />
    <rule ref="category/apex/codestyle.xml/IfElseStmtsMustUseBraces" />
    <rule ref="category/apex/design.xml/AvoidDeeplyNestedIfStmts" />
    <rule ref="category/apex/errorprone.xml/EmptyIfStmt" />
    <rule ref="category/apex/errorprone.xml/EmptyTryOrFinallyBlock" />
    <rule ref="category/apex/errorprone.xml/EmptyCatchBlock" />
    <rule ref="category/apex/codestyle.xml/WhileLoopsMustUseBraces" />
    <rule ref="category/apex/codestyle.xml/ForLoopsMustUseBraces" />
    <rule ref="category/apex/performance.xml/OperationWithLimitsInLoop" />
    <rule name="ExceptionClassNaming" language="apex" message="A Class name that extends an exception should have a name that ends in Exception" class="net.sourceforge.pmd.lang.rule.XPathRule">
        <priority>3</priority>
        <properties>
            <property name="version" value="2.0" />
            <property name="xpath">
                <value>
                    <![CDATA[//UserClass[not(contains(@Image,'Exception')) and (@SuperClassName='Exception')]]]>
                </value>
            </property>
        </properties>
    </rule>
    <rule name="IdempotentOperations" language="apex" message="Assignment has no effect" class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description />
        <priority>4</priority>
        <properties>
            <property name="version" value="2.0" />
            <property name="xpath">
                <value>
                    <![CDATA[//AssignmentExpression/VariableExpression[1][@Image = following-sibling::VariableExpression/@Image]]]>
                </value>
            </property>
        </properties>
    </rule>
    <rule name="ReturnEmptyArrayRatherThanNull" language="apex" message="Return Empty Array, Not Null" class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description />
        <priority>4</priority>
        <properties>
            <property name="version" value="2.0" />
            <property name="xpath">
                <value>
                    <![CDATA[//ReturnStatement/LiteralExpression[@LiteralType='NULL' and (//Method[contains(@ReturnType,'List')] or //Method[contains(@ReturnType,'[]')] or //Method[contains(@ReturnType,'Map')] or //Method[contains(@ReturnType,'Set')])]]]>
                </value>
            </property>
        </properties>
    </rule>
    <rule name="PositionLiteralsFirstInComparisons" language="apex" message="Position Literals First in Comparisons" class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description />
        <priority>4</priority>
        <properties>
            <property name="version" value="2.0" />
            <property name="xpath">
                <value>
                    <![CDATA[//MethodCallExpression[@MethodName='equals' or @MethodName='compareTo' or @MethodName='equalsIgnoreCase']/ReferenceExpression[@Image!='' and following-sibling::LiteralExpression/@Image!='']]]>
                </value>
            </property>
        </properties>
    </rule>
    <rule name="IsPrefixBooleanVariables" language="apex" message="Boolean variables should be prefixed by is." class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description />
        <priority>3</priority>
        <properties>
            <property name="version" value="2.0" />
            <property name="xpath">
                <value>
                    <![CDATA[//UserClass/Field[@Image[not((starts-with(., 'is')))] and @Type="Boolean" ]]]>
                </value>
            </property>
        </properties>
    </rule>
    <rule name="classNameShouldBeSuffixedByBatch" language="apex" message="The class name should be suffixed by Batch" class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description />
        <priority>3</priority>
        <properties>
            <property name="version" value="2.0" />
            <property name="xpath">
                <value>
                    <![CDATA[/UserClass[@InterfaceNames= 'Database.Batchable' and @Image[not(ends-with(., 'Batch'))]]]]>
                </value>
            </property>
        </properties>
    </rule>
    <rule name="suffixedByScheduler" language="apex" message="The class name should be suffixed by Scheduler" class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description />
        <priority>3</priority>
        <properties>
            <property name="version" value="2.0" />
            <property name="xpath">
                <value>
                    <![CDATA[/UserClass[@InterfaceNames= 'Schedulable' and @Image[not(ends-with(., 'Scheduler'))]]]]>
                </value>
            </property>
        </properties>
    </rule>
    <rule name="useCollectionsWithWhereClauses" language="apex" message="Use Collections in SOQL /WHERE/ clauses to retrieve all records back in single query" class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description />
        <priority>3</priority>
        <properties>
            <property name="version" value="2.0" />
            <property name="xpath">
                <value>
                    <![CDATA[/SoqlExpression[@Query[not(contains(.,'WHERE'))]]]]>
                </value>
            </property>
        </properties>
    </rule>
    <rule name="triggerShouldEndWithWordTrigger" language="apex" message="Trigger names should end with the keyword Trigger" class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description />
        <priority>3</priority>
        <properties>
            <property name="version" value="2.0" />
            <property name="xpath">
                <value>
                    <![CDATA[/UserTrigger[@Image[not(ends-with(., "Trigger"))]]]]>
                </value>
            </property>
        </properties>
    </rule>
    <rule name="triggerNameShouldNotContain __c" language="apex" message="All triggers are composed of the name of the triggering object object, without __c postfix as first part and the keyword Trigger as second part." class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description />
        <priority>3</priority>
        <properties>
            <property name="version" value="2.0" />
            <property name="xpath">
                <value>
                    <![CDATA[//TriggerDeclaration[@Image[(contains(., '__c'))] or @Image[(contains(., '__C'))]]]]>
                </value>
            </property>
        </properties>
    </rule>
    <rule name="singleLetterLoopsVariable" language="apex" message="Single Letter Variable within Loops" class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description />
        <priority>3</priority>
        <properties>
            <property name="version" value="2.0" />
            <property name="xpath">
                <value>
                    <![CDATA[/BlockStatement/ForEachStatement/VariableDeclarationStatements/VariableDeclaration[@EndColumn - @BeginColumn=0]]]>
                </value>
            </property>
        </properties>
    </rule>
    <rule name="Logic Inversion" language="apex" message="Use opposite operator instead of negating the whole expression with a logic complement operator." class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description></description>
        <priority>3</priority>
        <properties>
            <property name="version" value="2.0"/>
            <property name="xpath">
                <value>
                    <![CDATA[/UserClass/Method/BlockStatement/IfElseBlockStatement/IfBlockStatement/StandardCondition/PrefixExpression[@Operator = '!']]]>
                </value>
            </property>
        </properties>
    </rule>
    <rule name="Avoid Creating Cookies with isSecure Disabled"
      language="apex"
      message="By setting isSecure=false, sensitive cookies may be exposed when sending the cookie over an unsecure connection."
      class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description></description>
        <priority>1</priority>
        <properties>
            <property name="version" value="2.0"/>
            <property name="xpath">
                <value>
                    <![CDATA[/UserClass/Method/BlockStatement/ExpressionStatement/AssignmentExpression/NewObjectExpression/LiteralExpression[@Image = "false"]]]>
                </value>
            </property>
        </properties>
    </rule>
    <rule name="AvoidFieldNameMatchingMethodName"
      language="apex"
      message="It can be confusing to have a field name with the same name as a method. While this is permitted,having information (field) and actions (method) is not clear naming. Avoid Field Name Matching Method Name"
      class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description></description>
        <priority>3</priority>
        <properties>
            <property name="version" value="2.0"/>
            <property name="xpath">
                <value>
                    <![CDATA[//Method[@Image = //FieldDeclaration/@Image]]]>
                </value>
            </property>
        </properties>
    </rule>
    <rule name="Unreachable Code"
      language="apex"
      message="Code that is unreachable will never be executed. Consider refactoring any methods with unreachable code."
      class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description></description>
        <priority>3</priority>
        <properties>
            <property name="version" value="2.0"/>
            <property name="xpath">
                <value>
                    <![CDATA[
/StandardCondition/LiteralExpression[@LiteralType = 'FALSE']
|   
//ReturnStatement[following-sibling::node()]
|
    //ContinueStatement[following-sibling::node()]
|
    //BreakStatement[following-sibling::node()]
|
    //ThrowStatement[following-sibling::node()]

]]>
                </value>
            </property>
        </properties>
    </rule>
    <rule name="Avoid declarations hiding another field or variable"
      language="apex"
      message="One variable can hide another if they have the same name and are accessible in the same place. Consider renaming the variable."
      class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description></description>
        <priority>3</priority>
        <properties>
            <property name="version" value="2.0"/>
            <property name="xpath">
                <value>
                    <![CDATA[
//VariableDeclaration[@Image = //FieldDeclaration/@Image]
]]>
                </value>
            </property>
        </properties>
    </rule>
    <rule name="sf:ExcessiveMethodLength"
	  language="apex"
	  message="Excessive Method Length"
	  class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description></description>
        <priority>3</priority>
        <properties>
            <property name="version" value="2.0"/>
            <property name="xpath">
                <value>
                    <![CDATA[/UserClass/Method/BlockStatement[count(ExpressionStatement) > 100]]]>
                </value>
            </property>
        </properties>
    </rule>
    <rule name="sf:TooManyMethods"
		  language="apex"
		  message="Too Many Methods"
		  class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description></description>
        <priority>3</priority>
        <properties>
            <property name="version" value="2.0"/>
            <property name="xpath">
                <value>
                    <![CDATA[/UserClass[count(Method) > 10]]]>
                </value>
            </property>
        </properties>
    </rule>
    <rule name="MissingStaticMethodInNonInstantiatableClass"
		  language="apex"
		  message="Non-instantiable classes must define at least one static method."
		  class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description>
		  Checks that non-instantiable classes define at least one
		  static method.
	   </description>
        <priority>2</priority>
        <properties>
            <property name="version" value="2.0"/>
            <property name="xpath">
                <value>
                    <![CDATA[/UserClass[descendant-or-self::*/Method/ModifierNode[@Private = true()] and count(descendant-or-self::*/Method[@RealLoc = true()]/ModifierNode[@Static = true() and @Private = false()])=0]]]>
                </value>
            </property>
        </properties>
    </rule>
    <rule name="UseSingleton"
		  language="apex"
		  message="Use Singleton"
		  class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description>
		  For classes that only have static methods, consider making
		  them Singletons. Note that this doesn&apos;t apply to abstract
		  classes, since their subclasses may well include non-static
		  methods.  Also, if you want this class to be a Singleton,
		  remember to add a private constructor to prevent instantiation.
	   </description>
        <priority>2</priority>
        <properties>
            <property name="version" value="2.0"/>
            <property name="xpath">
                <value>
                    <![CDATA[/UserClass[count(descendant-or-self::*/Method[@RealLoc = true()]/ModifierNode[@Static = true()]) > 0 and not(descendant-or-self::*/ModifierNode[@Private = true() and @Image = ancestor-or-self::*/@Image])]/ModifierNode[@Abstract = false()]]]>
                </value>
            </property>
        </properties>
    </rule>
    <rule name="Unnecessary Boolean Assertion"
		  language="apex"
		  message="A Unit test assertion with a boolean literal is unnecessary since it always will evaluate to the same thing. Consider using flow control (in case of assertTrue(false) or similar) or simply removing statements like system.assert(true) and system.assert(!true). If you just want a test to halt after finding an error, use the system.assert(false, 'message') method and provide an indication message of why it did."
		  class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description></description>
        <priority>3</priority>
        <properties>
            <property name="version" value="2.0"/>
            <property name="xpath">
                <value>
                    <![CDATA[
	/UserClass//Method//MethodCallExpression[@MethodName = 'assert']/LiteralExpression[@Boolean=true()]
	|
	/UserClass//Method//MethodCallExpression[@MethodName = 'assert']/PrefixExpression//LiteralExpression[@Boolean=true()]
	]]>
                </value>
            </property>
        </properties>
    </rule>
    <rule name="Switch Statements Should Have a When Else Case"
		  language="apex"
		  message="Switch statements should always use a 'when else' case to account for all values and avoid unexpected functionality."
		  class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description></description>
        <priority>3</priority>
        <properties>
            <property name="version" value="2.0"/>
            <property name="xpath">
                <value>
                    <![CDATA[/UserClass//Method//SwitchStatement[not(ElseWhenBlock)]]]>
                </value>
            </property>
        </properties>
    </rule>
    <rule name="Avoid Using Test.isRunningTest()"
		  language="apex"
		  message="Avoid using Test.isRunningTest(), using this can hide problems that occur during testing."
		  class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description></description>
        <priority>3</priority>
        <properties>
            <property name="version" value="2.0"/>
            <property name="xpath">
                <value>
                    <![CDATA[//StandardCondition//VariableExpression[@Image = 'isRunningTest']/ReferenceExpression[@Image='Test']|//StandardCondition//MethodCallExpression[@FullMethodName = 'Test.isRunningTest']]]>
                </value>
            </property>
        </properties>
    </rule>
    <rule name="Trigger.new and Trigger.old array elements should not be accessed directly."
		  language="apex"
		  message="The number of elements in a trigger can change so accessing the trigger array directly may suggests a bug. Updating more than one account may mean that your trigger may not perform correctly. It also may mean that your trigger code is not bulkified."
		  class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description></description>
        <priority>3</priority>
        <properties>
            <property name="version" value="2.0"/>
            <property name="xpath">
                <value>
                    <![CDATA[//ArrayLoadExpression[TriggerVariableExpression]]]>
                </value>
            </property>
        </properties>
    </rule>
    <rule name="Controller_suffix"
		  language="apex"
		  message="Controller class name should have suffix Controller"
		  class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description></description>
        <priority>3</priority>
        <properties>
            <property name="version" value="2.0"/>
            <property name="xpath">
                <value>
                    <![CDATA[/UserClass[not(ends-with(@Image,"Controller")) and //Method//Annotation[contains(@Image,'AuraEnabled')]]]]>
                </value>
            </property>
        </properties>
    </rule>
    <rule name="UnconditionalIfStatement"
		  language="apex"  
		  message="Do not use 'if' statements whose conditionals are always true or always false."  
		  class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description> 
		Should Not Be using If condition when the value is always
		true or false.
	</description>
        <priority>3</priority>
        <properties>
            <property name="version" value="2.0"/>
            <property name="xpath">
                <value>
                    <![CDATA[/UserClass/Method[@Image]/BlockStatement/IfElseBlockStatement/IfBlockStatement/StandardCondition/LiteralExpression[@Image="true" or @Image="false"]]]>
                </value>
            </property>
        </properties>
    </rule>
	<rule name="sf:InsecureEndpoint"
      language="apex"
      message="Avoid Cleartext Transmission of Sensitive Information"
      class="net.sourceforge.pmd.lang.rule.XPathRule">
    <description>
      &quot;Checks against accessing endpoints under plain **http**.
      You should always use **https** for security. Many communication
      channels can be &quot;&quot;sniffed&quot;&quot; by attackers during data transmission.
   </description>
    <priority>3</priority>
    <properties>
        <property name="version" value="2.0"/>
        <property name="xpath">
            <value>
                <![CDATA[
//LiteralExpression[contains(@Image,'http://')]
]]>
            </value>
        </property>
    </properties>
</rule>
    <rule name="sf:ThrowFromFinallyBlock"
        language="apex"
        message="Avoid throwing from a finally block, this can discard any previous exceptions."
        class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description>
        Avoid throwing from a finally block, this can discard exceptions
    </description>
        <priority>1</priority>
        <properties>
            <property name="version" value="2.0"/>
            <property name="xpath">
                <value>
                    <![CDATA[
    //TryCatchFinallyBlockStatement/BlockStatement/ThrowStatement
    ]]>
                </value>
            </property>
        </properties>
    </rule>
    <rule name="sf:AvoidSizeOfSoql"
        language="apex"
        message="Avoid Calling sizeOf on a SOQL Statement."
        class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description>
        It&apos;s better to use an aggregate call like select COUNT()
        from table. This rule is not applied to test methods
    </description>
        <priority>2</priority>
        <properties>
            <property name="version" value="2.0"/>
            <property name="xpath">
                <value>
                    <![CDATA[
    /UserClass/ModifierNode[@Test=false()]/following-sibling::*/descendant::MethodCallExpression/*/SoqlExpression
    ]]>
                </value>
            </property>
        </properties>
    </rule>
    <rule name="sf:UnescapedOutput"
        language="apex"
        message="Unescaped Error Message XSS"
        class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description>
        Reports on calls to `addError` with disabled escaping. The
        message passed to `addError`will be displayed directly to
        the user in the UI, making it prime ground for XSS attacks
        if unescaped
    </description>
        <priority>2</priority>
        <properties>
            <property name="version" value="2.0"/>
            <property name="xpath">
                <value>
                    <![CDATA[
    /MethodCallExpression[@FullMethodName='addError']/descendant::VariableExpression[@Image='html']/following-sibling::LiteralExpression[@Image='false']
    ]]>
                </value>
            </property>
        </properties>
    </rule>
    <rule name="Avoid Catching NPE"
        language="apex"
        message="Code should never throw NullPointerExceptions under normal circumstances. A catch block may hide the original error, causing other, more subtle problems later on."
        class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description></description>
        <priority>3</priority>
        <properties>
            <property name="version" value="2.0"/>
            <property name="xpath">
                <value>
                    <![CDATA[
    /UserClass//Method//BlockStatement//CatchBlockStatement[@ExceptionType = "NullPointerException"]
    ]]>
                </value>
            </property>
        </properties>
    </rule>
    <rule name="Avoid Throwing New Instance of Same Exception"
        language="apex"
        message="Catch blocks that merely rethrow a caught exception wrapped inside a new instance of the same type only add to code size and runtime complexity."
        class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description></description>
        <priority>3</priority>
        <properties>
            <property name="version" value="2.0"/>
            <property name="xpath">
                <value>
                    <![CDATA[
    //TryCatchFinallyBlockStatement/CatchBlockStatement//NewObjectExpression[@Type = //CatchBlockStatement/@ExceptionType]
    ]]>
                </value>
            </property>
        </properties>
    </rule>
    <rule name="Return from Finally Block"
        language="apex"
        message="Avoid returning from a finally block, this can discard exceptions."
        class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description></description>
        <priority>3</priority>
        <properties>
            <property name="version" value="2.0"/>
            <property name="xpath">
                <value>
                    <![CDATA[
    //TryCatchFinallyBlockStatement/CatchBlockStatement/following-sibling::BlockStatement/ReturnStatement
    ]]>
                </value>
            </property>
        </properties>
    </rule>
    <rule name="Exception as Flow Control"
        language="apex"
        message="Using Exceptions as form of flow control is not recommended as they obscure true exceptions when debugging. Either add the necessary validation or use an alternate control structure."
        class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description></description>
        <priority>3</priority>
        <properties>
            <property name="version" value="2.0"/>
            <property name="xpath">
                <value>
                    <![CDATA[
    //TryCatchFinallyBlockStatement/CatchBlockStatement//NewObjectExpression[@Type = //CatchBlockStatement/@ExceptionType]

    ]]>
                </value>
            </property>
        </properties>
    </rule>
    <rule name="AvoidLosingExceptionInformation"
        language="apex"
        message="Avoid Losing Exception Information"
        class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description>
        Statements in a catch block that invoke accessors on the
        exception without using the information only add to code
        size. Either remove the invocation, or use the return result.
    </description>
        <priority>2</priority>
        <properties>
            <property name="version" value="2.0"/>
            <property name="xpath">
                <value>
                    <![CDATA[
    //CatchBlockStatement[@VariableName = descendant::*/ExpressionStatement/MethodCallExpression[@MethodName = 'getMessage']/ReferenceExpression/@Image]
    ]]>
                </value>
            </property>
        </properties>
    </rule>
    <rule name="PreserveStackTrace"
        language="apex"
        message="Preserve Stack Trace"
        class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description>
        Throwing a new exception from a catch block without passing
        the original exception into the\nnew exception will cause
        the original stack trace to be lost making it difficult to
        debug \neffectively.
    </description>
        <priority>2</priority>
        <properties>
            <property name="version" value="2.0"/>
            <property name="xpath">
                <value>
                    <![CDATA[
    //CatchBlockStatement[@VariableName = descendant::*/ThrowStatement/NewObjectExpression[@Type = 'Exception']//MethodCallExpression[@MethodName = 'getMessage']/ReferenceExpression/@Image]
    ]]>
                </value>
            </property>
        </properties>
    </rule>
    <rule name="FutureMethodInLoop"
        language="apex"
        message="Avoid Calling @Future Methods Inside Loops"
        class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description>
        Avoid calling @Future Methods Inside Loops. Soql and DML
        calls within loops can cause governor limit exceptions
    </description>
        <priority>2</priority>
        <properties>
            <property name="version" value="2.0"/>
            <property name="xpath">
                <value>
                    <![CDATA[
    //Method[descendant::*//Annotation[@Image = 'Future'] and //ForLoopStatement//MethodCallExpression/@MethodName = @Image]
    ]]>
                </value>
            </property>
        </properties>
    </rule>
    <rule name="AvoidForLoopToJustAddElementsToCollection"
        language="apex"
        message="Avoid For Loop To Just Add Elements To A Collection"
        class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description>
        The method .addAll should be used to add all elements from
        one collection to another. Using a for loop is unnecessary.
    </description>
        <priority>2</priority>
        <properties>
            <property name="version" value="2.0"/>
            <property name="xpath">
                <value>
                    <![CDATA[
    //ForEachStatement[self::*/BlockStatement//MethodCallExpression[@MethodName = 'add']/VariableExpression/@Image = self::*/VariableExpression/@Image]/VariableExpression[@Image = //VariableDeclaration[contains(@Type,'List')]/@Image]
    ]]>
                </value>
            </property>
        </properties>
    </rule>
    <rule name="UselessOperationOnImmutable"
        language="apex"
        message="Useless Operation On Immutable"
        class="net.sourceforge.pmd.lang.rule.XPathRule">
    <description>
        An operation on an Immutable object (String, Date, DateTime
        or Time) won&apos;t change the object itself\nsince the result
        of the operation is a new object. Therefore, ignoring the
        operation result is an error
    </description>
    <priority>2</priority>
    <properties>
        <property name="targetClass" type="String" value="TODO" description="TODO"/>
        <property name="version" value="2.0"/>
        <property name="xpath">
            <value>
    <![CDATA[
    //Method//ExpressionStatement/MethodCallExpression[@MethodName='concat' and self::*/ReferenceExpression/@Image = preceding::*/VariableDeclaration[@Type='String' or @Type='Date' or @Type='DateTime' or @Type='Time']/@Image]
    ]]>
            </value>
        </property>
    </properties>
    </rule>

    <rule name="EqualsNull"
        language="apex"
        message="Equals Null"
        class="net.sourceforge.pmd.lang.rule.XPathRule">
    <description>
        Tests for null should not use the equals() method. The &apos;==&apos;
        operator should be used instead.
    </description>
    <priority>2</priority>
    <properties>
        <property name="targetClass" type="String" value="TODO" description="TODO"/>
        <property name="version" value="2.0"/>
        <property name="xpath">
            <value>
    <![CDATA[
    //MethodCallExpression[@MethodName = 'equals']/LiteralExpression[@LiteralType = 'NULL']
    ]]>
            </value>
        </property>
    </properties>
    </rule>

    <rule name="AvoidDuplicateLiterals" language="apex" message="sf:AvoidDuplicateLiterals" class="net.sourceforge.pmd.lang.rule.XPathRule">
    <description>
        Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    </description>
    <priority>3</priority>
    <properties>
        <property name="version" value="2.0"/>
        <property name="xpath">
            <value>
                <![CDATA[//LiteralExpression[@LiteralType='STRING' and descendant-or-self::*/@Image= preceding::LiteralExpression[@LiteralType='STRING']/descendant-or-self::*/@Image[not(matches(., '[^A-Za-z0-9]'))]]]]>
            </value>
        </property>
    </properties>
    </rule>

    <rule name="sf:UnnecessaryReturn"
        language="apex"
        message="Avoid the use of unnecessary return statements.Avoid the use of unnecessary return statements."
        class="net.sourceforge.pmd.lang.rule.XPathRule">
    <description>
    </description>
    <priority>3</priority>
    <properties>
    <property name="version" value="2.0"/>
    <property name="xpath">
    <value>
    <![CDATA[
    //UserClass//Method//BlockStatement/ReturnStatement[not(VariableExpression |  LiteralExpression | SoqlExpression | MethodCallExpression)]
    ]]>
    </value>
    </property>
    </properties>
    </rule>

    

    <rule name="sf:NonUnitTestContainsAsserts"
        language="apex"
        message="Asserts should only be used in test methods."
        class="net.sourceforge.pmd.lang.rule.XPathRule">
    <description>
    </description>
    <priority>3</priority>
    <properties>
    <property name="version" value="2.0"/>
    <property name="xpath">
    <value>
    <![CDATA[
    //Method[@RealLoc = true()]/ModifierNode[@Test=false() and (//BlockStatement/ExpressionStatement/MethodCallExpression[@MethodName = "Assert"])]
    ]]>
    </value>
    </property>
    </properties>
    </rule>

    

    <rule name="sf:AuraEnabledWithoutCatchBlock"
        language="apex"
        message="@AuraEnabled actions require error handling and should throw AuraHandledException"
        class="net.sourceforge.pmd.lang.rule.XPathRule">
    <description>
    </description>
    <priority>3</priority>
    <properties>
    <property name="version" value="2.0"/>
    <property name="xpath">
    <value>
    <![CDATA[
    //Method[@RealLoc=true()]/BlockStatement[not(TryCatchFinallyBlockStatement) 
    and //Method[@RealLoc=true()]/ModifierNode/Annotation[@Image="AuraEnabled"]]
    |
    //Method[@RealLoc=true()]/BlockStatement/TryCatchFinallyBlockStatement[not(CatchBlockStatement) 
    and //Method[@RealLoc=true()]/ModifierNode/Annotation[@Image="AuraEnabled"]]
    |
    //Method[@RealLoc=true()]/BlockStatement/TryCatchFinallyBlockStatement/CatchBlockStatement/BlockStatement[not(ThrowStatement) 
    and //Method[@RealLoc=true()]/ModifierNode/Annotation[@Image="AuraEnabled"]]
    ]]>
    </value>
    </property>
    </properties>
    </rule>
    <rule name="BrokenNullCheck"
        language="apex"
        message="Broken Null Check"
        class="net.sourceforge.pmd.lang.rule.XPathRule">
    <description>
        The null check is broken since it will throw a NullPointerException
        itself. It is likely that you used || instead of &amp;&amp; or vice
        versa.
    </description>
    <priority>2</priority>
    <properties>
    <property name="targetClass" type="String" value="TODO" description="TODO"/>
    <property name="version" value="2.0"/>
    <property name="xpath">
    <value>
    <![CDATA[
    //IfBlockStatement/StandardCondition/BooleanExpression[@Operator = '||']/BooleanExpression[@Operator = '!=']/LiteralExpression[@LiteralType = 'NULL'] | //IfBlockStatement/StandardCondition/BooleanExpression[@Operator = '&&']/BooleanExpression[@Operator = '==']/LiteralExpression[@LiteralType = 'NULL']
    ]]>
    </value>
    </property>
    </properties>
    </rule>
    <rule name="AvoidMultipleUnaryOperators"
        language="apex"
        message="Avoid Multiple Unary Operators"
        class="net.sourceforge.pmd.lang.rule.XPathRule">
    <description>
        The use of multiple unary operators may be problematic,
        and/or confusing. Ensure that the intended usage is not a
        bug, or consider simplifying the expression.
    </description>
    <priority>2</priority>
    <properties>
    <property name="targetClass" type="String" value="TODO" description="TODO"/>
    <property name="version" value="2.0"/>
    <property name="xpath">
    <value>
    <![CDATA[
    //VariableDeclarationStatements/VariableDeclaration/PrefixExpression/PrefixExpression
    ]]>
    </value>
    </property>
    </properties>
    </rule>
</ruleset>
